// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ionchain/ionchain-core/common"
	"github.com/ionchain/ionchain-core/common/hexutil"
)

func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash  common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash   common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Root        common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash      common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom       Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty  *hexutil.Big   `json:"difficulty"       gencodec:"required"`
		Number      *hexutil.Big   `json:"number"           gencodec:"required"`
		GasLimit    *hexutil.Big   `json:"gasLimit"         gencodec:"required"`
		GasUsed     *hexutil.Big   `json:"gasUsed"          gencodec:"required"`
		Time        *hexutil.Big   `json:"timestamp"        gencodec:"required"`
		Extra       hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		Hash        common.Hash    `json:"hash"`
		// 新增字段
		BaseTarget *hexutil.Big                    `json:baseTarget              gencodec:"required"`   // baseTarget
		Coinbase    common.Address `json:"miner"            gencodec:"required"`
		BlockSignature hexutil.Bytes              `json:blockSignature          gencodec:"required"`   // 区块签名信息
		GenerationSignature hexutil.Bytes           `json:generationSignature     gencodec:"required"`   // 生成签名信息
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.UncleHash = h.UncleHash
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*hexutil.Big)(h.Difficulty)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.GasLimit = (*hexutil.Big)(h.GasLimit)
	enc.GasUsed = (*hexutil.Big)(h.GasUsed)
	enc.Time = (*hexutil.Big)(h.Time)
	enc.Extra = h.Extra

	enc.Hash = h.Hash()

	enc.BaseTarget=(*hexutil.Big)(h.BaseTarget)
	enc.Coinbase = h.Coinbase
	enc.BlockSignature=h.BlockSignature
	enc.GenerationSignature=h.GenerationSignature
	return json.Marshal(&enc)
}

func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash  *common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash   *common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Root        *common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash      *common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash *common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom       *Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty  *hexutil.Big    `json:"difficulty"       gencodec:"required"`
		Number      *hexutil.Big    `json:"number"           gencodec:"required"`
		GasLimit    *hexutil.Big    `json:"gasLimit"         gencodec:"required"`
		GasUsed     *hexutil.Big    `json:"gasUsed"          gencodec:"required"`
		Time        *hexutil.Big    `json:"timestamp"        gencodec:"required"`
		Extra       hexutil.Bytes   `json:"extraData"        gencodec:"required"`

		// 新增字段
		BaseTarget  *hexutil.Big                    `json:baseTarget              gencodec:"required"`   // baseTarget
		Coinbase    *common.Address `json:"miner"            gencodec:"required"`
		BlockSignature hexutil.Bytes             `json:blockSignature          gencodec:"required"`   // 区块签名信息
		GenerationSignature hexutil.Bytes           `json:generationSignature     gencodec:"required"`   // 生成签名信息
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for Header")
	}
	h.UncleHash = *dec.UncleHash

	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = (*big.Int)(dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = (*big.Int)(dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = dec.Extra


	// 新增字段
	if dec.BaseTarget == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.BaseTarget = (*big.Int)(dec.BaseTarget)

	if dec.Coinbase == nil {
		return errors.New("missing required field 'Coinbase' for Header")
	}
	h.Coinbase = *dec.Coinbase

	if dec.BlockSignature == nil {
		return errors.New("missing required field 'BlockSignature' for Header")
	}
	h.BlockSignature = dec.BlockSignature

	if dec.GenerationSignature == nil {
		return errors.New("missing required field 'GenerationSignature' for Header")
	}
	h.GenerationSignature = dec.GenerationSignature
	return nil
}
